---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: acs-deploy-check
spec:
  description: >-
    Policy check a deployment with StackRox/RHACS This tasks allows you to check
    a deployment against build-time policies and apply enforcement to fail
    builds. It's a companion to the stackrox-image-scan task, which returns full
    vulnerability scan results for an image.
  params:
    - description: |
        Secret containing the address:port tuple for StackRox Central)
        (example - rox.stackrox.io:443)
      name: rox_central_endpoint
      type: string
    - description: Secret containing the StackRox API token with CI permissions
      name: rox_api_token
      type: string
      default: my-spring-app-stackrox-token
    - default: "true"
      name: verbose
      type: string
    - default: "false"
      description: |
        When set to `"true"`, skip verifying the TLS certs of the Central
        endpoint.  Defaults to `"false"`.
      name: insecure-skip-tls-verify
      type: string
  results:
    - description: Output of `roxctl deployment check`
      name: check_output
  steps:
    - env:
        - name: ROX_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: rox_api_token
              name: $(params.rox_api_token)
      image: "registry.access.redhat.com/ubi8:8.7-1026"
      name: rox-deploy-scan
      resources: {}
      script: |
        #!/usr/bin/env bash

        set +x
        echo "ROX_API_TOKEN = <$ROX_API_TOKEN>"
        echo "rox_central_endpoint = <$(params.rox_central_endpoint)>"

        if [[ "$ROX_API_TOKEN" == "rox_api_token" ]] ; then
          echo "rox_api_token is not set, demo will exit with success"
          echo "TODO: configure the pipeline to have access to ROXCTL"
          exit 0
        fi

        echo "Configuration"
        echo "Directory = $(pwd)"
        ls -al


        curl -s -k -L -H "Authorization: Bearer $ROX_API_TOKEN" \
          "https://$(params.rox_central_endpoint)/api/cli/download/roxctl-linux" \
          --output ./roxctl  \
          > /dev/null

        chmod +x ./roxctl  > /dev/null

        for component in argocd/components/*; do
          echo $component
          if [ -f $component/base/deployment.yaml ]; then
            echo "ROXCTL on $component/base/deployment.yaml"
            ./roxctl deployment check \
              $( [ "$(params.insecure-skip-tls-verify)" = "true" ] && \
              echo -n "--insecure-skip-tls-verify") \
              -e "$(params.rox_central_endpoint)" --file "$component/base/deployment.yaml"
          fi
        done
      volumeMounts:
        - mountPath: /workspace/repository
          name: repository
      workingDir: /workspace/repository
  volumes:
    - emptyDir: {}
      name: repository
