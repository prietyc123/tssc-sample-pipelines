---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "virus, appstudio, hacbs"
  name: clamav-scan
spec:
  description: >-
    Scans the content of container images for viruses, malware, and other malicious content using ClamAV antivirus scanner.
  results:
    - name: TEST_OUTPUT
      description: Tekton task test output.
  params:
    - name: image-digest
      description: Image digest to scan.
    - name: image-url
      description: Image URL.
    - name: docker-auth
      description: unused
      default: ""

  steps:
    - name: extract-and-scan-image
      image: quay.io/redhat-appstudio/hacbs-test:v1.2.1@sha256:f351461c26733bf65cd6cddd5933114c9a4a1e2b5546f7505ddc95a2fa44c709
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
      workingDir: /work
      # need to change user since 'oc image extract' requires more privileges when running as root
      # https://bugzilla.redhat.com/show_bug.cgi?id=1969929
      securityContext:
        runAsUser: 1000
      env:
        - name: HOME
          value: /work
        - name: IMAGE_URL
          value: $(params.image-url)
        - name: IMAGE_DIGEST
          value: $(params.image-digest)
      computeResources:
        limits:
          memory: 4Gi
        requests:
          memory: 512Mi
          cpu: 10m
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        . /utils.sh
        trap 'handle_error' EXIT

        imagewithouttag=$(echo $IMAGE_URL | sed "s/\(.*\):.*/\1/" | tr -d '\n')

        # strip new-line escape symbol from parameter and save it to variable
        imageanddigest=$(echo $imagewithouttag@$IMAGE_DIGEST)

        # check if image is attestation one, skip the clamav scan in such case
        if [[ $imageanddigest == *.att ]]
        then
            echo "$imageanddigest is an attestation image. Skipping ClamAV scan."
            exit 0
        fi
        mkdir content
        cd content
        echo Extracting image.
        if ! oc image extract --registry-config ~/.docker/config.json $imageanddigest; then
          echo "Unable to extract image. Skipping ClamAV scan!"
          exit 0
        fi

        echo "Scanning image. This operation may take a while."
        clamscan -ri --max-scansize=4095M --max-filesize=4095M \
          --max-scantime=0 --max-files=0 --max-recursion=1000 --max-dir-recursion=20000 --max-embeddedpe=4095M \
          --max-htmlnormalize=10M --max-htmlnotags=4095M --max-scriptnormalize=5M --max-ziptypercg=4095M \
          --max-partitions=50000 --max-iconspe=100000 --max-rechwp3=20000 --pcre-match-limit=100000000 --pcre-recmatch-limit=2000000 \
          --pcre-max-filesize=4095M --alert-exceeds-max=yes \
          --alert-encrypted=yes --alert-encrypted-archive=yes --alert-encrypted-doc=yes --alert-macros=yes \
          --alert-phishing-ssl=yes --alert-phishing-cloak=yes --alert-partition-intersection=yes \
          | tee /tekton/home/clamscan-result.log || true
        echo "Executed-on: Scan was executed on version - $(clamscan --version)" | tee -a /tekton/home/clamscan-result.log

        # OPA/EC requires structured data input, add clamAV log into json
        jq -Rs '{ output: . }' /tekton/home/clamscan-result.log > /tekton/home/clamscan-result-log.json

        EC_EXPERIMENTAL=1 ec test \
          --namespace required_checks \
          --policy /project/clamav/virus-check.rego \
          -o json \
          /tekton/home/clamscan-result-log.json || true

        # workaround: due to a bug in ec-cli, we cannot generate json and appstudio output at the same time, running it again
        EC_EXPERIMENTAL=1 ec test \
          --namespace required_checks \
          --policy /project/clamav/virus-check.rego \
          -o appstudio \
          /tekton/home/clamscan-result-log.json | tee $(results.TEST_OUTPUT.path) || true
      volumeMounts:
        - mountPath: /var/lib/clamav
          name: dbfolder
        - mountPath: /work
          name: work
  # sidecar is rebuilt daily(is meant to be updated daily), hence the usage of the tag instead of digest
  # provides latest virus database for clamscan only
  # does not execute anything
  sidecars:
    - image: quay.io/redhat-appstudio/clamav-db:v1 # explicit floating tag, daily updates, per arch call this is exempt for now for use of image digest
      imagePullPolicy: Always
      name: database
      script: |
        #!/usr/bin/env bash
        clamscan --version
        cp -r /var/lib/clamav/* /tmp/clamdb
      volumeMounts:
        - mountPath: /tmp/clamdb
          name: dbfolder
  volumes:
    - name: dbfolder
      emptydir: {}
    - name: work
      emptydir: {}
